<%
  def yaml_escape(input_string)
    chars_to_escape = /[:\\"\x00-\x1f\x7f]/
    chars_needing_quotes = /[ !#'&%*,:>@\[\]\\`{|}]/
    delimiter = (chars_needing_quotes.match(input_string) ||
              chars_to_escape.match(input_string)) ? '"' : ''
    fixed_string = input_string.gsub(/(#{chars_to_escape})/) { |m| "\\x#{'%x' % m.ord}" }

    "#{delimiter}#{fixed_string}#{delimiter}"
  end
%>

---

pid_filename: /var/vcap/sys/run/cc_deployment_updater/cc_deployment_updater.pid

index: <%= spec.index %>
name: <%= name %>

logging:
  file: /var/vcap/sys/log/cc_deployment_updater/cc_deployment_updater.log
  syslog: vcap.cloud_controller_ng
  level: "<%= p("cc.logging_level") %>"
  max_retries: <%= p("cc.logging_max_retries") %>

external_port: <%= link("cloud_controller_internal").p("cc.external_port") %>
tls_port: <%= link("cloud_controller_internal").p("cc.tls_port") %>
internal_service_hostname: <%= link("cloud_controller_internal").p("cc.internal_service_hostname") %>

external_protocol: <%= link("cloud_controller_internal").p("cc.external_protocol") %>
external_domain: <%= link("cloud_controller_internal").p("cc.external_host") %>.<%= link("cloud_controller_internal").p("system_domain") %>

<% db = p("ccdb.databases").find { |db| db["tag"] == "cc" } %>
<% db_role = p("ccdb.roles").find { |role| role["tag"] == "admin" } %>
<%
  database_address = nil
  if_p('ccdb.address') do |host|
    database_address = host
  end.else do
    database_address = link('database').instances[0].address
  end
%>
db: &db
  database: "<%= p("ccdb.db_scheme") == "mysql" ? "mysql2" : p("ccdb.db_scheme") %>://<%= db_role["name"] %>:<%= CGI.escape(db_role["password"]) %>@<%= database_address %>:<%= p("ccdb.port") %>/<%= db["name"] %>"
  database_parts:
    adapter: <%= p("ccdb.db_scheme") == "mysql" ? "mysql2" : p("ccdb.db_scheme") %>
    host: <%= database_address %>
    port: <%= p("ccdb.port") %>
    user: <%= db_role["name"] %>
    password: <%= yaml_escape(db_role["password"]) %>
    database: <%= db["name"] %>
  max_connections: <%= p("ccdb.max_connections") %>
  pool_timeout: <%= p("ccdb.pool_timeout") %>
  log_level: "<%= p("cc.db_logging_level") %>"
  log_db_queries: <%= p("cc.log_db_queries") %>
  ssl_verify_hostname: <%= p("ccdb.ssl_verify_hostname") %>
  read_timeout: <%= p("ccdb.read_timeout") %>
  connection_validation_timeout: <%= p("ccdb.connection_validation_timeout") %>
<% if_p('ccdb.ca_cert') do %>
  ca_cert_path: '/var/vcap/jobs/cc_deployment_updater/config/certs/db_ca.crt'
<% end %>

db_encryption_key: <%= p("cc.db_encryption_key") %>

<% if_p("cc.database_encryption") do %>
database_encryption:
  keys: <%= p("cc.database_encryption.keys", {}).to_json %>
  current_key_label: <%= p("cc.database_encryption.current_key_label").inspect %>
  pbkdf2_hmac_iterations: <%= link("cloud_controller_internal").p("cc.database_encryption.experimental_pbkdf2_hmac_iterations") %>
<% end %>

<% if_link("cloud_controller_to_copilot_conn") do |copilot_conn| %>
copilot:
  enabled: <%= link("cloud_controller_internal").p("copilot.enabled") %>
  host: <%= link("cloud_controller_internal").p("copilot.host") %>
  port: <%= copilot_conn.p("listen_port_for_cloud_controller") %>
  temporary_istio_domains: <%= link("cloud_controller_internal").p("copilot.temporary_istio_domains") %>
  client_ca_file: /var/vcap/jobs/cc_deployment_updater/config/certs/copilot_ca.crt
  client_key_file: /var/vcap/jobs/cc_deployment_updater/config/certs/copilot.key
  client_chain_file: /var/vcap/jobs/cc_deployment_updater/config/certs/copilot.crt
<% end %>

diego:
  temporary_oci_buildpack_mode: <%= p("cc.diego.temporary_oci_buildpack_mode", nil) %>
  enable_declarative_asset_downloads: <%= p("cc.diego.enable_declarative_asset_downloads") %>
  file_server_url: <%= p("cc.diego.file_server_url") %>
  cc_uploader_url: <%= p("cc.diego.cc_uploader_url") %>
  use_privileged_containers_for_running: <%= p("cc.diego.use_privileged_containers_for_running") %>
  use_privileged_containers_for_staging: <%= p("cc.diego.use_privileged_containers_for_staging") %>
  lifecycle_bundles: <%= p("cc.diego.lifecycle_bundles").to_json %>
  droplet_destinations: <%= p("cc.diego.droplet_destinations").to_json %>
  bbs:
    url: <%= p("cc.diego.bbs.url") %>
    key_file: /var/vcap/jobs/cc_deployment_updater/config/certs/mutual_tls.key
    cert_file: /var/vcap/jobs/cc_deployment_updater/config/certs/mutual_tls.crt
    ca_file: /var/vcap/jobs/cc_deployment_updater/config/certs/mutual_tls_ca.crt
    connect_timeout: <%= p("cc.diego.bbs.connect_timeout") %>
    send_timeout: <%= p("cc.diego.bbs.send_timeout") %>
    receive_timeout: <%= p("cc.diego.bbs.receive_timeout") %>
  pid_limit: <%= p("cc.diego.pid_limit") %>

default_app_memory: <%= p("cc.default_app_memory") %>
default_app_disk_in_mb: <%= p("cc.default_app_disk_in_mb") %>
maximum_app_disk_in_mb: <%= p("cc.maximum_app_disk_in_mb") %>
instance_file_descriptor_limit: <%= p("cc.instance_file_descriptor_limit") %>

deployment_updater:
  update_frequency_in_seconds: <%= p("deployment_updater.update_frequency_in_seconds") %>
  lock_key: 'cc-deployment-updater'
  lock_owner: <%= spec.id %>

staging:
  timeout_in_seconds: <%= link("cloud_controller_internal").p("cc.staging_timeout_in_seconds") %>
  auth:
    user: <%= link("cloud_controller_internal").p("cc.staging_upload_user") %>
    password: <%= yaml_escape(link("cloud_controller_internal").p("cc.staging_upload_password")) %>

default_health_check_timeout: <%= link("cloud_controller_internal").p("cc.default_health_check_timeout") %>

stacks_file: /var/vcap/jobs/cloud_controller_ng/config/stacks.yml

resource_pool:
  blobstore_type: <%= link("cloud_controller_internal").p("cc.resource_pool.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= link("cloud_controller_internal").p("cc.resource_pool.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= link("cloud_controller_internal").p("cc.resource_pool.webdav_config.public_endpoint") %>
    private_endpoint: <%= link("cloud_controller_internal").p("cc.resource_pool.webdav_config.private_endpoint") %>
    username: <%= link("cloud_controller_internal").p("cc.resource_pool.webdav_config.username") %>
    password: <%= yaml_escape(link("cloud_controller_internal").p("cc.resource_pool.webdav_config.password")) %>
    <% if link("cloud_controller_internal").p("cc.resource_pool.webdav_config.ca_cert") != "" && link("cloud_controller_internal").p("cc.resource_pool.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cc_deployment_updater/config/certs/resource_pool_ca_cert.pem"
    <% end %>
  minimum_size: <%= link("cloud_controller_internal").p("cc.resource_pool.minimum_size") %>
  maximum_size: <%= link("cloud_controller_internal").p("cc.resource_pool.maximum_size") %>
  resource_directory_key: <%= link("cloud_controller_internal").p("cc.resource_pool.resource_directory_key") %>
  <% link("cloud_controller_internal").if_p("cc.resource_pool.cdn") do %>
  cdn:
    uri: <%= link("cloud_controller_internal").p("cc.resource_pool.cdn.uri") %>
    key_pair_id: <%= link("cloud_controller_internal").p("cc.resource_pool.cdn.key_pair_id") %>
    private_key: <%= link("cloud_controller_internal").p("cc.resource_pool.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= link("cloud_controller_internal").p("cc.resource_pool.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= link("cloud_controller_internal").p("cc.resource_pool.fog_aws_storage_options", {}).to_json %>

packages:
  blobstore_type: <%= link("cloud_controller_internal").p("cc.packages.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= link("cloud_controller_internal").p("cc.packages.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= link("cloud_controller_internal").p("cc.packages.webdav_config.public_endpoint") %>
    private_endpoint: <%= link("cloud_controller_internal").p("cc.packages.webdav_config.private_endpoint") %>
    username: <%= link("cloud_controller_internal").p("cc.packages.webdav_config.username") %>
    password: <%= yaml_escape(link("cloud_controller_internal").p("cc.packages.webdav_config.password")) %>
    <% if link("cloud_controller_internal").p("cc.packages.webdav_config.ca_cert") != "" && link("cloud_controller_internal").p("cc.packages.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cc_deployment_updater/config/certs/packages_ca_cert.pem"
    <% end %>
  app_package_directory_key: <%= link("cloud_controller_internal").p("cc.packages.app_package_directory_key") %>
  max_package_size: <%= link("cloud_controller_internal").p("cc.packages.max_package_size") %>
  <% link("cloud_controller_internal").if_p("cc.packages.cdn") do %>
  cdn:
    uri: <%= link("cloud_controller_internal").p("cc.packages.cdn.uri") %>
    key_pair_id: <%= link("cloud_controller_internal").p("cc.packages.cdn.key_pair_id") %>
    private_key: <%= link("cloud_controller_internal").p("cc.packages.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= link("cloud_controller_internal").p("cc.packages.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= link("cloud_controller_internal").p("cc.packages.fog_aws_storage_options", {}).to_json %>

opi:
  url: "<%= p("cc.opi.url") %>"
  opi_staging: <%= p("cc.opi.opi_staging") %>
  enabled: <%= p("cc.opi.enabled") %>

droplets:
  blobstore_type: <%= link("cloud_controller_internal").p("cc.droplets.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= link("cloud_controller_internal").p("cc.droplets.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= link("cloud_controller_internal").p("cc.droplets.webdav_config.public_endpoint") %>
    private_endpoint: <%= link("cloud_controller_internal").p("cc.droplets.webdav_config.private_endpoint") %>
    username: <%= link("cloud_controller_internal").p("cc.droplets.webdav_config.username") %>
    password: <%= yaml_escape(link("cloud_controller_internal").p("cc.droplets.webdav_config.password")) %>
    <% if link("cloud_controller_internal").p("cc.droplets.webdav_config.ca_cert") != "" && link("cloud_controller_internal").p("cc.droplets.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cc_deployment_updater/config/certs/droplets_ca_cert.pem"
    <% end %>
  droplet_directory_key: <%= link("cloud_controller_internal").p("cc.droplets.droplet_directory_key") %>
  <% link("cloud_controller_internal").if_p("cc.droplets.cdn") do %>
  cdn:
    uri: <%= link("cloud_controller_internal").p("cc.droplets.cdn.uri") %>
    key_pair_id: <%= link("cloud_controller_internal").p("cc.droplets.cdn.key_pair_id") %>
    private_key: <%= link("cloud_controller_internal").p("cc.droplets.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= link("cloud_controller_internal").p("cc.droplets.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= link("cloud_controller_internal").p("cc.droplets.fog_aws_storage_options", {}).to_json %>

buildpacks:
  blobstore_type: <%= link("cloud_controller_internal").p("cc.buildpacks.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= link("cloud_controller_internal").p("cc.buildpacks.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= link("cloud_controller_internal").p("cc.buildpacks.webdav_config.public_endpoint") %>
    private_endpoint: <%= link("cloud_controller_internal").p("cc.buildpacks.webdav_config.private_endpoint") %>
    username: <%= link("cloud_controller_internal").p("cc.buildpacks.webdav_config.username") %>
    password: <%= yaml_escape(link("cloud_controller_internal").p("cc.buildpacks.webdav_config.password")) %>
    <% if link("cloud_controller_internal").p("cc.buildpacks.webdav_config.ca_cert") != "" && link("cloud_controller_internal").p("cc.buildpacks.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cc_deployment_updater/config/certs/buildpacks_ca_cert.pem"
    <% end %>
  buildpack_directory_key: <%= link("cloud_controller_internal").p("cc.buildpacks.buildpack_directory_key") %>
  <% link("cloud_controller_internal").if_p("cc.buildpacks.cdn") do %>
  cdn:
    uri: <%= link("cloud_controller_internal").p("cc.buildpacks.cdn.uri") %>
    key_pair_id: <%= link("cloud_controller_internal").p("cc.buildpacks.cdn.key_pair_id") %>
    private_key: <%= link("cloud_controller_internal").p("cc.buildpacks.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= link("cloud_controller_internal").p("cc.buildpacks.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= link("cloud_controller_internal").p("cc.buildpacks.fog_aws_storage_options", {}).to_json %>

bits_service:
  enabled: <%= link("cloud_controller_internal").p("cc.bits_service.enabled") %>
  public_endpoint: <%= link("cloud_controller_internal").p("cc.bits_service.public_endpoint") %>
  private_endpoint: <%= link("cloud_controller_internal").p("cc.bits_service.private_endpoint") %>
  username: <%= link("cloud_controller_internal").p("cc.bits_service.username") %>
  password: <%= yaml_escape(link("cloud_controller_internal").p("cc.bits_service.password")) %>
  <% if_link("bits_service_active_signing_key") do |active_signing_key| %>
  signing_key_id: <%= active_signing_key.p("bits-service.active_signing_key.key_id") %>
  signing_key_secret: <%= active_signing_key.p("bits-service.active_signing_key.secret") %>
  <% end %>

skip_cert_verify: <%= link("cloud_controller_internal").p("ssl.skip_cert_verify") %>

<% if_link("credhub") do |credhub| %>
credhub_api:
  internal_url: <%= "https://#{link("cloud_controller_internal").p("credhub_api.hostname")}:#{credhub.p("credhub.port")}" %>
  ca_cert_path: "/var/vcap/jobs/cc_deployment_updater/config/certs/credhub_ca.crt"
<% end %>

credential_references:
  interpolate_service_bindings: <%= link("cloud_controller_internal").p("cc.credential_references.interpolate_service_bindings") %>

<% if link("cloud_controller_internal").p("routing_api.enabled") %>
routing_api:
  url: <%= "https://api.#{link("cloud_controller_internal").p("system_domain")}/routing" %>
  routing_client_name: "cc_routing"
  routing_client_secret: <%= link("cloud_controller_internal").p("uaa.clients.cc_routing.secret") %>
<% end %>

locket:
  host: <%= p("cc.locket.host") %>
  port: <%= p("cc.locket.port") %>
  key_file: /var/vcap/jobs/cc_deployment_updater/config/certs/mutual_tls.key
  cert_file: /var/vcap/jobs/cc_deployment_updater/config/certs/mutual_tls.crt
  ca_file: /var/vcap/jobs/cc_deployment_updater/config/certs/mutual_tls_ca.crt

statsd_host: <%= link("cloud_controller_internal").p("cc.statsd_host") %>
statsd_port: <%= link("cloud_controller_internal").p("cc.statsd_port") %>

max_labels_per_resource: <%= link("cloud_controller_internal").p("cc.max_labels_per_resource") %>
max_annotations_per_resource: <%= link("cloud_controller_internal").p("cc.max_annotations_per_resource") %>
